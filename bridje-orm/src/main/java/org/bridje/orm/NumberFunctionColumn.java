/*
 * Copyright 2016 Bridje Framework.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.bridje.orm;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a database column associated with a field of an Entity, or a
 * function column. Objects from this class will be generated by the ORM api so
 * the user can use then for building the querys for the Entities of his data
 * model. Ex: MyEntity_.someColumn.eq("A Name") = Condition for
 * MyEntity.someColumn field.
 *
 * @param <E> The type for the entity that this column belongs to.
 * @param <T> The type of the column.
 * @param <B> The type of the base column for this function column.
 */
public class NumberFunctionColumn<E, T, B> extends FunctionColumn<E, T, B>
{
    /**
     * This constructor is used to create a column with a function or operator.
     *
     * @param column The Table object this columns belong to.
     * @param type The type for this column.
     * @param function The function expresion to be use when selialize this
     * object to a query.
     * @param parameters The parameters list on the current query, that this
     * column must have for correct serialization.
     */
    public NumberFunctionColumn(Column<E, B> column, Class<T> type, String function, List<Object> parameters)
    {
        super(column, type, function, parameters);
    }
    
    /**
     * Creates a new column that totalize all the values of the current column.
     * Ex: if this column is some_col the resulting column will be
     * sum(some_col).
     *
     * @return The new sum column.
     */
    public NumberFunctionColumn<E, T, B> sum()
    {
        String functionExp;
        functionExp = "SUM(" + getFunction() + ")";
        return new NumberFunctionColumn<>(getColumn(), getType(), functionExp, getParameters());
    }

    /**
     * Creates a new column that will return the sum of the current column plus
     * the value especified.
     *
     * @param value The value to add to the column.
     * @return The new created column.
     */
    public NumberFunctionColumn<E, T, B> puls(T value)
    {
        String functionExp;
        functionExp = getFunction() + " + ?";
        addParameter(value);
        return new NumberFunctionColumn<>(getColumn(), getType(), functionExp, getParameters());
    }

    /**
     * Creates a new column that will return the the current column values minus
     * the value especified.
     *
     * @param value The value to substract to the column.
     * @return The new created column.
     */
    public NumberFunctionColumn<E, T, B> minus(T value)
    {
        String functionExp;
        functionExp = getFunction() + " - ?";
        addParameter(value);
        return new NumberFunctionColumn<>(getColumn(), getType(), functionExp, getParameters());
    }
}
