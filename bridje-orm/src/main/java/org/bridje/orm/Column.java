/*
 * Copyright 2016 Bridje Framework.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.bridje.orm;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a database column associated with a field of an Entity, or a
 * function column. Objects from this class will be generated by the ORM api so
 * the user can use then for building the querys for the Entities of his data
 * model. Ex: MyEntity_.someColumn.eq("A Name") = Condition for
 * MyEntity.someColumn field.
 *
 * @param <E> The type for the entity that this column belongs to.
 * @param <T> The type of the column.
 */
public class Column<E, T>
{
    private final Table<E> table;

    private final String field;

    private final Class<T> type;

    /**
     * This constructor is used to create a column without any funcions, a
     * column constructed by this constructor along will represent the plain
     * database column with no functions, columns must be created with the table
     * object they belong to, the field name as declared in the entity class,
     * and the Type of the field.
     *
     * @param table The Table object this columns belong to.
     * @param field The field name for the declared java field in the base
     * entity class.
     * @param type The java type for this column.
     */
    public Column(Table<E> table, String field, Class<T> type)
    {
        this.table = table;
        this.field = field;
        this.type = type;
    }

    /**
     * The table this column belongs to.
     *
     * @return A Table object representing the table this column belongs to.
     */
    public Table<E> getTable()
    {
        return table;
    }

    /**
     * Gets the field name for the declared java field in the base entity class.
     *
     * @return The field name for the declared java field in the base entity
     * class.
     */
    public String getField()
    {
        return field;
    }

    /**
     * Gets the java type for this column.
     *
     * @return The java type for this column.
     */
    public Class<T> getType()
    {
        return type;
    }

    /**
     * Creates a new equals "=" condition with this column as a left operand and
     * the provided value as the left operand.
     *
     * @param value The right operaand for the condition.
     * @return The new created condition.
     */
    public Condition eq(T value)
    {
        return new BinaryCondition(this, Operator.EQ, value);
    }

    /**
     * Creates a new not equals "&lt;&gt;" condition with this column as a left
     * operand and the provided value as the left operand.
     *
     * @param value The right operaand for the condition.
     * @return The new created condition.
     */
    public Condition ne(T value)
    {
        return new BinaryCondition(this, Operator.NE, value);
    }

    /**
     * Creates a new greather than "&gt;" condition with this column as a left
     * operand and the provided value as the left operand.
     *
     * @param value The right operator for the condition.
     * @return The new created condition.
     */
    public Condition gt(T value)
    {
        return new BinaryCondition(this, Operator.GT, value);
    }

    /**
     * Creates a new greather than or equals to "&gt;=" condition with this
     * column as a left operand and the provided value as the left operand.
     *
     * @param value The right operaand for the condition.
     * @return The new created condition.
     */
    public Condition ge(T value)
    {
        return new BinaryCondition(this, Operator.GE, value);
    }

    /**
     * Creates a new leaser than "&lt;" condition with this column as a left
     * operand and the provided value as the left operand.
     *
     * @param value The right operaand for the condition.
     * @return The new created condition.
     */
    public Condition lt(T value)
    {
        return new BinaryCondition(this, Operator.LT, value);
    }

    /**
     * Creates a new leaser than or equals to "&lt;=" condition with this column
     * as a left operand and the provided value as the left operand.
     *
     * @param value The right operaand for the condition.
     * @return The new created condition.
     */
    public Condition le(T value)
    {
        return new BinaryCondition(this, Operator.LE, value);
    }

    /**
     * Creates a new ascending order by statement that can be user to order a
     * query that involves the entity of this column.
     *
     * @return The new ascending OrderBy statement.
     */
    public OrderBy asc()
    {
        return new OrderBy(OrderByType.ASC, this);
    }

    /**
     * Creates a new descending order by statement that can be user to order a
     * query that involves the entity of this column.
     *
     * @return The new descending OrderBy statement.
     */
    public OrderBy desc()
    {
        return new OrderBy(OrderByType.DESC, this);
    }
}
